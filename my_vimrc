filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'Yggdroot/indentLine' " 缩进虚线
Plugin 'scrooloose/nerdcommenter' " 批量注释
Plugin 'nsf/gocode', {'rtp': 'vim/'}
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'fatih/vim-go'
"Plugin 'fatih/molokai'
Plugin 'majutsushi/tagbar'
"Plugin 'flazz/vim-colorschemes'

call vundle#end()
filetype plugin indent on


"""""""""""""""""""""插件配置"""""""""""""""""""""
" 自动补全配置
set completeopt=longest,menu
"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"离开插入模式后自动关闭预览窗口
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
"回车即选中当前项
"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

"youcompleteme  默认tab  s-tab 和自动补全冲突
"let g:ycm_key_list_select_completion=['<c-n>']
"let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
"let g:ycm_key_list_previous_completion = ['<Up>']

"设置error和warning的提示符，如果没有设置，ycm会以syntastic的  
let g:ycm_error_symbol='>>'  
let g:ycm_warning_symbol='>*'  

"设置跳转的快捷键，可以跳转到definition和declaration  
nnoremap <leader>gc :YcmCompleter GoToDeclaration<CR>  
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>  
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>  
" 跳转到定义处
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> 
nmap <F4> :YcmDiags<CR>  
"force recomile with syntastic
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
let g:ycm_error_symbol = '!'
let g:ycm_warning_symbol = '?'
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
"开启基于tag的补全，可以在这之后添加需要的标签路径  
let g:ycm_collect_identifiers_from_tags_files = 1  
""开启语义补全  
let g:ycm_seed_identifiers_with_syntax = 1  
"在接受补全后不分裂出一个窗口显示接受的项  
"set completeopt-=preview  
""不显示开启vim时检查ycm_extra_conf文件的信息  
let g:ycm_confirm_extra_conf=0  
"每次重新生成匹配项，禁止缓存匹配项  
let g:ycm_cache_omnifunc=0  
""在注释中也可以补全  
let g:ycm_complete_in_comments=1  
"输入第一个字符就开始补全  
let g:ycm_min_num_of_chars_for_completion=1  
""不查询ultisnips提供的代码模板补全，如果需要，设置成1即可  
let g:ycm_use_ultisnips_completer=1 
let g:ycm_semantic_triggers = {
  \   'c' : ['->', '    ', '.', ' ', '(', '[', '&', '	'],
  \     'go':['.'],
  \     'cpp,objcpp' : ['->', '.', ' ', '(', '[', '&', '::'],
  \     'perl' : ['->', '::', ' '],
  \     'php' : ['->', '::', '.'],
  \     'cs,java,javascript,d,vim,python,perl6,scala,vb,elixir,go' : ['.'],
  \     'ruby' : ['.', '::'],
  \     'lua' : ['.', ':']
  \ }
"----------------------------------------------------------------

"set UltiSnips
let g:UltiSnipsSnippetDirectories=['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
" ctrl+z 触发代码块补全
let g:UltiSnipsExpandTrigger = '<C-z>'
let g:UltiSnipsListSnippets = '<C-l>'
" 跳转到下一个代码块可编辑区
let g:UltiSnipsJumpForwardTrigger = '<C-f>'
let g:UltiSnipsJumpBackwardTrigger = '<C-b>'
" ---------------------------------------------------------------

"" vim-go
let s:packages = [  
            \ "github.com/nsf/gocode",   
            \ "code.google.com/p/go.tools/cmd/goimports",   
            \ "code.google.com/p/rog-go/exp/cmd/godef",   
            \ "code.google.com/p/go.tools/cmd/oracle",   
            \ "code.google.com/p/go.tools/cmd/gorename",  
            \ "github.com/golang/lint/golint",   
            \ "github.com/kisielk/errcheck",  
            \ "github.com/jstemmer/gotags",  
            \ ]
" 跳转到定义
nmap <c-p> :GoDef<CR>
"函数被调用的位置
nmap <c-l> :GoImplements<CR>
" 打开tagbar 
nmap <F8> :TagbarToggle<CR> 
" ----------------------------------------------------------------

" Tagbar 
:highlight TagbarSignature guifg=Green ctermfg=Yellow
" ----------------------------------------------------------------

" indentLine
let g:indentLine_color_term = 39
let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_char = '┆'
let g:indentLine_enabled = 1
" ----------------------------------------------------------------

"  批量注释
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
" let g:NERDCustomDelimiters = {'c': {'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting aregion)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" <leader>cc 注释当前行
" <leader>cm 只用一组符号来注释
" <leader>cy 注释并复制
" <leader>cs 优美的注释
" <leader>cu 取消注释


"""""""""""""""""""""基本配置"""""""""""""""""""""""""""""
filetype on 
let mapleader=","
set timeout timeoutlen=1500
set noedcompatible " 关闭vi一致性
set nu
set showcmd         " 输入的命令显示出来，看的清楚些 
autocmd InsertLeave * se nocul  " 用浅色高亮当前行
autocmd InsertEnter * se cul " 用浅色高亮当前行
set cursorline " 突出显示当前行
set magic " 设置魔术
set ruler " 显示标尺
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=utf-8
" 我的状态行显示的内容（包括文件类型和解码）
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
" 总是显示状态行
set laststatus=2
" 命令行（在状态行下）的高度，默认为1，这里是2
""set cmdheight=2

" 映射全选+复制 ctrl+a
map <C-A> ggVGY
map! <C-A> <Esc>ggVGY
map <F12> gg=G

" 设置当文件被改动时自动载入
set autoread
set autowrite "自动保存

set completeopt=preview,menu 
" 语法高亮
set syntax=on
set confirm
" 自动缩进
set autoindent
set cindent
" Tab键的宽度
set tabstop=4
" 统一缩进为4
set softtabstop=4
set shiftwidth=4
" 不要用空格代替制表符
"set noexpandtab
set foldcolumn=0
set foldmethod=indent 
set foldlevel=3 
set foldenable  " 开始折叠

" 在行和段开始处使用制表符
set invsmarttab
set nocompatible
set history=1000
"禁止生成临时文件
set nobackup
set noswapfile
"搜索忽略大小写
set ignorecase
"搜索逐字符高亮
set hlsearch
set incsearch
"行内替换
set invgdefault
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1
" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=4
" 为C程序提供自动缩进
set smartindent
" 高亮显示普通txt文件（需要txt.vim脚本）
au BufRead,BufNewFile *  setfiletype txt
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {<CR>}<ESC>O
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction
filetype plugin indent on

"""""新文件标题""""""""""
"新建.c,.h,.sh,.java文件，自动插入文件头
let g:auther="EleZtian"
let g:myemail="eleztian@163.com"
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()"
"""定义函数SetTitle，自动插入文件头
func SetTitle()
	"如果文件类型为.sh文件
	if &filetype == 'sh'
	call setline(1,"#########################################################################")
	call append(line("."), "# File Name: ".expand("%"))
	call append(line(".")+1, "# Author: ".g:auther)
	call append(line(".")+2, "# mail: ".g:myemail)
	call append(line(".")+3, "# Created Time: ".strftime("%c"))
	call append(line(".")+4, "# Description:" )
	call append(line(".")+5, "#########################################################################")
	call append(line(".")+6, "#!/bin/bash")
	call append(line(".")+7, "")
	else
	call setline(1, "/*************************************************************************")
	call append(line("."), " > File Name: ".expand("%"))
	call append(line(".")+1, " > Author: test")
	call append(line(".")+2, " > Mail: eleztian@163.com")
	call append(line(".")+3, " > Created Time: ".strftime("%c"))
	call append(line(".")+4, " > Description:")
	call append(line(".")+5, " ************************************************************************/")
	call append(line(".")+6, "")
	endif
	if &filetype == 'cpp'
	call append(line(".")+6, "#include<iostream>")
	call append(line(".")+7, "using namespace std;")
	call append(line(".")+8, "")
	endif
	if &filetype == 'c'
	call append(line(".")+6, "#include<stdio.h>")
	call append(line(".")+7, "")
	endif
	"新建文件后，自动定位到文件末尾
	autocmd BufNewFile * normal G
endfunc


"let g:molokai_original = 1
"let g:rehash256 = 1

"colorscheme molokai_go 
"
"设置注释颜色为绿色
hi Comment ctermfg=6;
